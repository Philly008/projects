var IMG_BASEPATH_TABBAR = ctx+"/scripts/dhtmlxSuite/dhtmlx_std_full/imgs/";
var comboIndex=1;													//表格div的id名称计数器
var timeout = null; 												//延迟调用对象
var IMG_BASEPATH_GRID = ctx+"/scripts/dhtmlxSuite/dhtmlx_std_full/imgs/";
var inLazy=true; 
var currentTextByValue={};
	//10月28日前的nip_common
	//10月28日前的nip_common
	//10月28日前的nip_common
	//10月28日前的nip_common
var NIP_GRID_TEMPLATE={
	div_id:"",						//对应DIV的id
	grid:null,						//对应grid对象
	grid_url:"",					//获取数据的url
	grid_param:function(){},		//url对应的参数，返回json类型的属性对象或者url
	grid_event:{},					//事件列表，传入json对象绑定事件和对应的回调函数
	grid_init:function(grid){}		//grid对象的初始化
};
var NIP_COMBO_TEMPLATE={
	div_id:"",						//对应DIV的id
	width:300,						//文本框宽度
	name:"",						//提交的name
	textObj:null,					//文本框对象,这是一个JQuery对象
	displayByGrid:function(grid,selectedIndex){
		var text="#"+grid.getSelectedRowId()+":";
		for(var i=0;i<grid.getColumnsNum();i++){
			if(i>0){
				text+="-";
			}
			text+=grid.cells2(selectedIndex,i).getValue();	
		}
		return text;
	},								//当选择Grid中某一条数据后在文本框中显示的内容，grid中第几列,默认所有列用横杠分开
	grid:null,						//grid对象
	grid_width:300,					//表格宽
	grid_height:250,				//表格高
	grid_align:"left",				//表格对齐方式
	grid_url:"",					//表格数据加载的url
	grid_url_paramName:"searchText",//加载数据时传递的文本框值对应的参数名	
	grid_url_paramAppend:function(){return null;},		//搜索时的额外参数，Json对象
	grid_init:function(grid){return grid;},		//表格基本配置
	grid_onChange:function(){},		//选择后的操作
	search_priority:null			//搜索的优先级
};


//通用Grid加载函数(2013-8-27柳明修改)
function buildNipGrid(paramJson,finishCallback){
	var target=paramJson.grid;
	var url=paramJson.grid_url;
	var param=paramJson.grid_param();
	var div=paramJson.div_id;
	var initCallback=paramJson.grid_init;
	var event=paramJson.grid_event;	
	if(target==null){
		//创建dhtmlxGrid对象
		var grid = new dhtmlXGridObject(div);
		grid.setImagePath(IMG_BASEPATH_GRID);
		target=initCallback(grid);
		paramJson.grid=target;
		if(event!=null){
			for (var key in event){ 
				target.attachEvent(key,event[key]);
			}
		}	
		if(finishCallback!=null){
			finishCallback(target);
		}
	}
	else{
		$.post(url,param,function(data) {
			if (data != null && data != "null" && data != "") {
				target.clearAll();
				target.parse(data);
				paramJson.grid=target;
				if(finishCallback!=null){
					finishCallback(target);
				}
			} else {
				target = null;
				$("#"+div).html("<br/><h3 align='center'>数据加载异常</h3>");
			}
		}, "text");
	}
	return target;
}
var NipComboGrid=function(param){
	//默认参数
	this.paramJson={
		div_id:"",										//对应DIV的id
		width:300,										//文本框宽度
		name:"",										//提交的name
		textObj:null,									//文本框对象,这是一个JQuery对象
		displayByGrid:function(grid,index){return "1";}, //当回车或双击提交Grid中某一条数据后在文本框中显示的内容，默认为空												
		grid:null,										//对应的DhtmlxGrid对象
		grid_width:300,									//表格宽
		grid_height:250,								//表格高
		grid_align:"left",								//表格对齐方式
		grid_url:"",									//表格数据加载的url
		grid_url_paramName:"searchText",				//加载数据时传递的文本框值对应的参数名	
		grid_url_paramAppend:function(){return null;},	//搜索时的额外参数，Json对象
		grid_init:function(grid){return grid;},			//表格基本配置
		grid_onChange:function(){},						//当回车或双击提交后的操作
		search_priority:null							//搜索时对应匹配列的优先级
	};
	//使用传递的参数覆盖默认参数
	for(var key in param){
		if(param[key]!=null){
			this.paramJson[key]=param[key];
		}
	}	
	currentTextByValue[this.paramJson.div_id]="";
	this.setValue=function(val){
		return $("#"+this.paramJson.div_id+" input:hidden").val(val);
	};
	this.setText=function(val){
		var divId=this.paramJson.div_id;
		currentTextByValue[divId]=val;
		return $("#"+divId+" input:text").val(val);
	};
	this.getValue=function(){
		return $("#"+this.paramJson.div_id+" input:hidden").val();
	};
	this.getText=function(){
		return $("#"+this.paramJson.div_id+" input:text").val();
	};
	
	this.getGridObj=function(){
		return this.paramJson.grid;
	};
	this.isCurrentText=function(){
		var divId=this.paramJson.div_id;
		var ctext=currentTextByValue[divId];
		var text=$("#"+this.paramJson.div_id+" input:text").val();
		return ctext==text;
	};
	this.resetText=function(){
		var divId=this.paramJson.div_id;
		var ctext=currentTextByValue[divId];
		var text=$("#"+this.paramJson.div_id+" input:text").val();
		if(ctext!=text){
			$("#"+this.paramJson.div_id+" input:text").val(ctext);
		}
	};
	this.buildComboAjax=function(){		
		var div=this.paramJson.div_id;
		var width=this.paramJson.width;
		var name=this.paramJson.name;
		var gwidth=this.paramJson.grid_width;
		var gheight=this.paramJson.grid_height;
		var gridId="comboGrid"+comboIndex;
		var textId="comboText"+comboIndex;
		var hideTextId="comboHidden"+comboIndex;
		var init=this.paramJson.grid_init;
		var paramName=this.paramJson.grid_url_paramName;
		var paramAppend=this.paramJson.grid_url_paramAppend;
		var displayText=this.paramJson.displayByGrid;
		var change=this.paramJson.grid_onChange;
		var loadOver=true;
		comboIndex++;
		//创建对应页面元素，配置样式和属性
		$("#"+div)
		.css("width",width)
		.addClass("comboDiv")
		.append(
			$("<div></div>")
			.addClass("textDiv")
			.append(
				$("<input/>")
				.attr("id",textId)
				.css("width",width-(isIE?20:17))
			)
			.append(
				$("<input/>")
				.attr("type","hidden")
				.attr("id",hideTextId)
				.attr("name",name)
			)
			.append("<a></a>")
			.append("<p/>")
		).append(
			$("<div></div>")
			.css("width",gwidth)
			.css("height",gheight)
			.attr("id",gridId)
			.hide()
		);
		var paramFunction=function(){
			var json= eval("({"+paramName+":\""+$("#"+textId).val()+"\"})");
			var jsonAppend=paramAppend();
			if(jsonAppend!=null){
				for(var key in jsonAppend){
					json[key]=jsonAppend[key];
				}
			}
			return json;
		};
		//构建dhtmlxGrid表格参数
		var gridParam={
			div_id:gridId,
			grid:null,
			grid_url:this.paramJson.grid_url,
			grid_param:paramFunction,
			grid_init:init			
		};
		/*
		
		*/
		gridParam.grid_event={"onEnter":function(id,ind){
			cvalue=displayText(gridParam.grid,gridParam.grid.getRowIndex(id));
			//回车时保存当前div选中值对应的text
			currentTextByValue[div]=cvalue;
			$("#"+textId).val(cvalue).focus();
			$("#"+hideTextId).val(id);
			$("#"+gridId).hide();
			change();
		},"onRowSelect":function(id,ind){
			cvalue=displayText(gridParam.grid,gridParam.grid.getRowIndex(id));
			//回车时保存当前div选中值对应的text
			currentTextByValue[div]=cvalue;
			$("#"+textId).val(cvalue).focus();
			$("#"+hideTextId).val(id);
			$("#"+gridId).hide();
			change();
			
		},"onMouseOver":function(id,ind){		
			gridParam.grid.selectRowById(id);
			$("#"+textId).focus();
		}};	
		

		this.paramJson.textObj=$("#"+textId);
		this.paramJson.grid=buildNipGrid(gridParam,function(grid){
			$("#"+gridId).addClass("gridDiv");
			$("#"+div+" a").click(function(){
				if(loadOver==false) return;
				if($("#"+gridId+":hidden").size()>0){
					$("#"+textId).val("");
					$("#"+hideTextId).val("");
					loadOver=false;
					buildNipGrid(gridParam,function(grid){
						if(grid.getRowsNum()>0){
							grid.selectRow(0);
						}
						$("#"+gridId).show();
						$("#"+textId).focus();
						loadOver=true;
					});				
				}
				else{
					$("#"+gridId).hide();
				}
			});
			//if(grid.getRowsNum()>0){
			$("#"+textId)
			.bind("propertychange", function() {
				if(loadOver==false) return;
				var act = document.activeElement.id;
				//alert(act+"-"+textId);
				if(act!=textId)return;
				//如果清空文本框则清空value
				if($("#"+textId).val()==""){
					$("#"+hideTextId).val("");
					$("#"+gridId).hide();
					grid.clearAll();
					change();
					return;
				}
				var cvalue=currentTextByValue[div];
				if($("#"+textId).val()==cvalue){
					return;
				}
				if(inLazy==true){
					clearTimeout(timeout);
					timeout=setTimeout("changeLazy('"+textId+"')",500); 
					return;
				}
				//loadOver代表Ajax操作是否已经完成，默认为false，当未完成时不响应任何事件
				loadOver=false;
				buildNipGrid(gridParam,function(grid){
					if(grid.getRowsNum()>0){
						grid.selectRow(0);
					}
					$("#"+gridId).show();
					$("#"+textId).focus();
					//加载完成则设置为true
					loadOver=true;
				});	
				inLazy=true;
				
				return;
				
			})
			.bind("keydown",function(event){
				if(loadOver==false) return;
				var isHide=$("#"+gridId+":hidden").size()>0;			
				//显示按上——选中上一条，如果选中第一条则无操作
				if(event.keyCode==38&&!isHide){					
					var index=grid.getRowIndex(grid.getSelectedRowId());
					if(index>0){						
						grid.selectRow(index-1);
						$("#"+textId).focus();
					}
					return;
				}
				//显示按下——选中下一条，如果选中最后一条则无操作
				if(event.keyCode==40&&!isHide){
					var index=grid.getRowIndex(grid.getSelectedRowId());
					var rowsNum=grid.getRowsNum();
					if(index<rowsNum-1){						
						grid.selectRow(index+1);
						$("#"+textId).focus();
					}
					return;
				}
				//隐藏回车——清空并查询所有
				if(event.keyCode==13&&isHide){
					$("#"+textId).val("");
					$("#"+hideTextId).val("");
					loadOver=false;
					buildNipGrid(gridParam,function(grid){
						if(grid.getRowsNum()>0){
							grid.selectRow(0);
						}
						$("#"+gridId).show();
						$("#"+textId).focus();
						loadOver=true;
					});	
				}
				//显示回车——提交选中
				if(event.keyCode==13&&!isHide){					
					if(grid.getRowsNum()==0) return;
					var id=grid.getSelectedRowId();
					cvalue=displayText(grid,grid.getRowIndex(id));
					//回车时保存当前div选中值对应的text
					currentTextByValue[div]=cvalue;
					$("#"+textId).val(cvalue).focus();
					$("#"+hideTextId).val(id);
					$("#"+gridId).hide();
					change();
				}
			}).bind("blur",function(event){
				var act = document.activeElement.id;
				//alert(act+"-"+gridId);
				if(act!=null&&act!=""&&act!=textId&&act!=gridId){
					$("#"+gridId).hide();
				}
			});	
		});
	};
};
/*
this.buildComboLocal=function(){
		var div=this.paramJson.div_id;
		var width=this.paramJson.width;
		var name=this.paramJson.name;
		var gwidth=this.paramJson.grid_width;
		var gheight=this.paramJson.grid_height;
		var gridId="comboGrid"+comboIndex;
		var textId="comboText"+comboIndex;
		var hideTextId="comboHidden"+comboIndex;
		var init=this.paramJson.grid_init;
		var paramName=this.paramJson.grid_url_paramName;
		var paramAppend=this.paramJson.grid_url_paramAppend;
		var displayText=this.paramJson.displayByGrid;
		var change=this.paramJson.grid_onChange;
		var priority=this.paramJson.search_priority;
		comboIndex++;
		//创建对应页面元素，配置样式和属性
		$("#"+div)
		.css("width",width)
		.addClass("comboDiv")
		.append(
			$("<div></div>")
			.addClass("textDiv")
			.append(
				$("<input/>")
				.attr("id",textId)
				.css("width",width-(isIE?19:17))
			)
			.append(
				$("<input/>")
				.attr("type","hidden")
				.attr("id",hideTextId)
				.attr("name",name)
			)
			.append("<a></a>")
			.append("<p/>")
		).append(
			$("<div></div>")
			.css("width",gwidth)
			.css("height",gheight)
			.attr("id",gridId)
			.hide()
		);
		var paramFunction=function(){
			var json= eval("({"+paramName+":\""+$("#"+textId).val()+"\"})");
			var jsonAppend=paramAppend();
			if(jsonAppend!=null){
				for(var key in jsonAppend){
					json[key]=jsonAppend[key];
				}
			}
			return json;
		};
		//构建dhtmlxGrid表格参数
		var gridParam={
			div_id:gridId,
			grid:null,
			grid_url:this.paramJson.grid_url,
			grid_param:paramFunction,
			grid_init:init			
		};
		gridParam.grid_event={"onEnter":function(id,ind){
			$("#"+textId).val(displayText(gridParam.grid,gridParam.grid.getRowIndex(id))).focus();
			$("#"+hideTextId).val(id);
			$("#"+gridId).hide();
			change();
		},"onRowDblClicked":function(id,ind){		
			$("#"+textId).val(displayText(gridParam.grid,gridParam.grid.getRowIndex(id))).focus();
			$("#"+hideTextId).val(id);
			$("#"+gridId).hide();
			change();
		},"onMouseOver":function(id,ind){		
			gridParam.grid.selectRowById(id);
		}};
		this.paramJson.textObj=$("#"+textId);
		this.paramJson.grid=buildNipGrid(gridParam,function(grid){
			$("#"+gridId).addClass("gridDiv");
			$("#"+div+" a").click(function(){
				if($("#"+gridId+":hidden").size()>0){
					$("#"+gridId).show();			
				}
				else{
					$("#"+gridId).hide();
				}
			});
			if(grid.getRowsNum()>0){
				$("#"+textId).keydown(function(event){					
					var isHide=$("#"+gridId+":hidden").size()>0;
					var str=$(this).val();
					var isEmpty=(str=="");					
					//隐藏空文本回车——显示并选中第一条
					if(event.keyCode==13&&isEmpty&&isHide){
						$("#"+gridId).show();
						grid.selectRow(0);
						$("#"+textId).focus();	
						return;
					}
					//隐藏非空文本回车——显示并定位
					if(event.keyCode==13&&!isEmpty&&isHide){
						$("#"+gridId).show();
						if(inLazy){
							clearTimeout(timeout);
							timeout=setTimeout("changeLazy('"+textId+"')",500); 
							return;
						}	
						inLazy=true;
						selectRowBySearchStr(grid,str,priority);		
						$("#"+textId).focus();	
						return;
					}
					//显示回车——提交选中
					if(event.keyCode==13&&!isHide){
						var id=grid.getSelectedRowId(); 
						$("#"+textId).val(displayText(grid,grid.getRowIndex(id))).focus();
						$("#"+hideTextId).val(id);
						$("#"+gridId).hide();
						change();
						return;
					}
					//显示按上——选中上一条，如果选中第一条则无操作
					if(event.keyCode==38&&!isHide){
						var index=grid.getRowIndex(grid.getSelectedRowId());
						if(index>0){						
							grid.selectRow(index-1);
							$("#"+textId).focus();
						}
						return;
					}
					//显示按下——选中下一条，如果选中最后一条则无操作
					if(event.keyCode==40&&!isHide){
						var index=grid.getRowIndex(grid.getSelectedRowId());
						var rowsNum=grid.getRowsNum();
						if(index<rowsNum-1){						
							grid.selectRow(index+1);
							$("#"+textId).focus();
						}
						return; 
					}
					//其他按键空文本——隐藏
					if(isEmpty){
						$("#"+gridId).hide();
						$(this).next().val("");
						$("#"+textId).focus();
						return;
					}
					//其他按键非空文本——定位
					if(!isEmpty){
						$("#"+gridId).show();
						if(inLazy){
							clearTimeout(timeout);
							timeout=setTimeout("changeLazy('"+textId+"')",500); 
							return;
						}	
						inLazy=true;
						selectRowBySearchStr(grid,str,priority);
						$("#"+textId).focus();
					}				
				});
			}
		});
	};
 */

function selectRowBySearchStr(grid,str,priority){
	var hitArray=new Array();
	if(priority!=null&&priority.length>0){
		for(var i=0;i<priority.length;i++){//i列，j行
			for(var j=grid.getRowsNum()-1;j>=0;j--){
				var value=grid.cells2(j,priority[i]).getValue();
				if(value.indexOf(str)>=0){
					hitArray.push(grid.getRowId(j));
				}
			}	
		}
	}
	else{
		for(var i=0;i<grid.getColumnsNum();i++){//i列，j行							
			for(var j=grid.getRowsNum()-1;j>=0;j--){
				var value=grid.cells2(j,i).getValue();
				if(value.indexOf(str)>=0){
					hitArray.push(grid.getRowId(j));
				}
			}							
		}
	}
	for(var k=0;k<hitArray.length;k++){
		var newId = (new Date()).valueOf();
	    var oldId=hitArray[k];
	    grid.addRow(newId,"",0);
	    grid.copyRowContent(oldId,newId);
	    grid.deleteRow(oldId);
	    grid.changeRowId(newId,oldId);
	}	
	grid.selectRow(0);
}
function buildCombo(paramJson){
	var div=paramJson.div_id;
	var width=paramJson.width;
	var name=paramJson.name;
	var gwidth=paramJson.grid_width;
	var gheight=paramJson.grid_height;
	var gridId="comboGrid"+comboIndex;
	var textId="comboText"+comboIndex;
	var hideTextId="comboHidden"+comboIndex;
	var init=paramJson.grid_init;
	var paramName=paramJson.grid_url_paramName;
	var paramAppend=paramJson.grid_url_paramAppend;
	var displayText=paramJson.displayByGrid;
	var change=paramJson.grid_onChange;
	//创建对应页面元素，配置样式和属性
	$("#"+div)
	.css("width",width)
	.addClass("comboDiv")
	.append(
		$("<div></div>")
		.addClass("textDiv")
		.append(
			$("<input/>")
			.attr("id",textId)
			.css("width",width-(isIE?19:17))
		)
		.append(
			$("<input/>")
			.attr("type","hidden")
			.attr("id",hideTextId)
			.attr("name",name)
		)
		.append("<a></a>")
		.append("<p/>")
	).append(
		$("<div></div>")
		.css("width",gwidth)
		.css("height",gheight)
		.attr("id",gridId)
		.hide()
	);
	var paramFunction=function(){
		var json= eval("({"+paramName+":\""+$("#"+textId).val()+"\"})");
		var jsonAppend=paramAppend();
		if(jsonAppend!=null){
			for(var key in jsonAppend){
				json[key]=jsonAppend[key];
			}
		}
		return json;
	};
	//构建dhtmlxGrid表格参数
	var gridParam={
		div_id:gridId,
		grid:null,
		grid_url:paramJson.grid_url,
		grid_param:paramFunction,
		grid_init:init
	};
	gridParam.grid_event={"onEnter":function(id,ind){
		$("#"+textId).val(displayText(gridParam.grid,gridParam.grid.getRowIndex(id))).focus();
		$("#"+hideTextId).val(id);
		$("#"+gridId).hide();
		change();
	},"onRowDblClicked":function(id,ind){		
		$("#"+textId).val(displayText(gridParam.grid,gridParam.grid.getRowIndex(id))).focus();
		$("#"+hideTextId).val(id);
		$("#"+gridId).hide();
		change();
	},"onMouseOver":function(id,ind){		
		gridParam.grid.selectRowById(id);
	}};
	buildGrid(gridParam,false,function(grid){
		paramJson.grid=gridParam.grid;
		paramJson.textObj=$("#"+textId);
		$("#"+div+" a").click(function(){
			if($("#"+gridId+":hidden").size()>0){
				gridParam.grid_param=function(){return paramAppend();};
				buildGrid(gridParam,false,function(){
					$("#"+gridId).show();
				});
				gridParam.grid_param=paramFunction;				
			}
			else{
				$("#"+gridId).hide();
			}
		});
		$("#"+textId)
		.keyup(function(event){
			var cstr=$(this).val();	
			//直接按下，则显示所有
			/*if(cstr==""&&event.keyCode==40){
				buildGrid(gridParam,false);					
				return;
			}*/
			//常规输入清空文本框，则终止所有操作隐藏表格
			if(cstr==""&&event.keyCode!=40){				
				$("#"+gridId).hide();
				$(this).next().val("");				
				change();
				return;
			}
			//常规输出但不按下进行常规搜索
			if(cstr!=""&&event.keyCode!=40){
				$(this).next().val(cstr);
				buildGrid(gridParam,false,function(){					
					$("#"+gridId).show();
				});
				return;
			}
			
			//搜索完毕按下则导航到Grid，默认选中第一条
			if(cstr!=""&&event.keyCode==40){
				$("#"+gridId).focus();
				buildGrid(gridParam,true,function(){	
					$("#"+gridId).show();
				});			
				return;
			}	
			
		});
		$("#"+gridId).addClass("gridDiv");
	});
	comboIndex++;
}
function getValue(divId){
	alert("此功能已废弃，请参考9月6日邮件");
	return $("#"+divId+" input:hidden").val();
}
function getText(divId){
	alert("此功能已废弃，请参考9月6日邮件");
	return $("#"+divId+" input:text").val();
}
//Info板块信息框
function fadeInMessage(message,callback) {
	/*
	if (color == null)
		color = "green";
	if (time == null)
		time = 3000;
	if (target==null)
		target=parent.mainMessage;
	if (timeout != null) {
		clearTimeout(timeout);
		timeout = null;
	} else {
		target
		.stop()
		.css("color", color)
		.text(message)
		.fadeIn(200, function() {
			setTimeout(function() {
				target.fadeOut(500);
			}, time);
		});
	}
	return;
	*/
	//alert(message);
	if(callback)
		jAlert(message, '提示信息', callback);
	else
		jAlert(message, '提示信息');
	/*
	if(callback)
		dhtmlx.message({
			title: "提示信息",
	        type: "alert-warning",
			text: message,
			ok: "确&nbsp;&nbsp;定",
			callback: callback
		});
	else
		dhtmlx.message({
			title: "提示信息",
	        type: "alert-warning",
			text: message,
			ok: "确&nbsp;&nbsp;定"
		});
	*/
}	

function fadeInMessageConfirm(message,callback) {
	dhtmlx.confirm({
		title: "确认信息",
        type:"confirm-warning",
		text: message,
		ok: "确&nbsp;&nbsp;定",
		cancel: "取&nbsp;&nbsp;消",
		callback: callback
	});
}

//10月28日后的最新的nip_common
//10月28日后的最新的nip_common
//10月28日后的最新的nip_common
//10月28日后的最新的nip_common
var PARAM_STANDARD={
	/*必填内容*/
	div_id:"someDiv",												//对应DIV的id
	width:500,														//Combo的宽度
	grid_url:"",													//表格数据加载的url	
	grid_init:function(grid){},										//表格初始化				
	/*选填内容*/
	name:"",	
	grid_url_param:function(textValue){								//url对应参数
		return {searchStr:textValue};
	},												
	displayByGrid:function(grid,selectedIndex){						//选择后显示在文本框中的内容
		return grid.cells2(selectedIndex,3).getValue();
	},													//grid对象
	grid_width:500,													//表格宽
	grid_height:250,												//表格高
	grid_align:"left",												//表格对齐方式	
	grid_onChange:function(){}
};
//Info板块信息框
function fadeInMessageDiv(message,color,time,target) {
	/*
	if (color == null)
		color = "red";
	if (time == null)
		time = 3000;
	if (target==null)
		target=parent.mainMessage;
	if (timeout != null) {
		clearTimeout(timeout);
		timeout = null;
	} else {
		target
		.stop()
		.css("color", color)
		.text(message)
		.fadeIn(200, function() {
			setTimeout(function() {
				target.fadeOut(500);
			}, time);
		});
	}
	return;
	*/
	var $m = $('<div style="bottom:0px;right:1px!important;right:18px;line-height:30px;position:fixed;border:1px solid #fff;text-align:center;padding-left:5px;font-size:20px;font-weight:bold;color:red;background:#E0E9F5;"></div>');
   	//if (message) $m.append('<h2>'+message+'</h2>');
	if (message) $m.append(message);
   	$.blockUI({
		 message: $m,
		 fadeIn: 700,
		 fadeOut: 1000,
		 timeout: 3000,
		 centerY: false,
		 showOverlay: false
		 ,css: { 
		   		top:		'',
		    	width:		'300px',
		    	bottom:		'0px',
		    	left:		'',
		    	right:		'2px',
		    	border:		'none',
		    	opacity:	0.6,
		    	cursor:		'default',
		    	color:		'#fff',
		    	backgroundColor: '#000'
             }
 	 });
}

function fadeInMsg(message) {
	var target = parent.mainMessage;
	target
	.stop()
	.css("color", "red")
	.text(message)
	.fadeIn(200, function() {
		
	});

	return;
}

function fadeOut() {
	var target = parent.mainMessage;
	target.fadeOut(0);
	return;
}
//针对与showModalDialog和showModelessDialog的弹出框
function fadeInMsg2(message) {
	var target = window.dialogArguments.parent.mainMessage;
	target
	.stop()
	.css("color", "red")
	.text(message)
	.fadeIn(10, function() {
		
	});

	return;
}

function fadeOut2() {
	var target = window.dialogArguments.parent.mainMessage;
	target.fadeOut(0);
	return;
}


//根据一个json对象设置传入id对应的form的值
function buildFormByJson(json,formId){
	if(json==null||json==""||formId=="")return;
	var jdata=null;
	if(!isJson(json)){
		jdata = eval('(' + json + ')');
	}
	else{
		jdata=json;
	}
	$("#"+formId+" :input").each(function(){
		var id=$(this).attr("id");
		if ($(this).filter(":checkbox").size() > 0) {
			if (jdata[id] == "true") {
				this.checked=true;
			} else {
				this.checked=false;
			}
		} else {				
			$(this).val(jdata[id]);
		}
	});
	return jdata;
}




/*
 * MAP对象，实现MAP功能
 *
 * 接口：
 * size()     			获取MAP元素个数
 * isEmpty()    		判断MAP是否为空
 * clear()     			删除MAP所有元素
 * put(key, value)   	向MAP中增加元素（key, value) 
 * remove(key)    		删除指定KEY的元素，成功返回True，失败返回False
 * get(key)    			获取指定KEY的元素值VALUE，失败返回NULL
 * element(index)   	获取指定索引的元素（使用element.key，element.value获取KEY和VALUE），失败返回NULL
 * containsKey(key)  	判断MAP中是否含有指定KEY的元素
 * containsValue(value) 判断MAP中是否含有指定VALUE的元素
 * values()    			获取MAP中所有VALUE的数组（ARRAY）
 * keys()     			获取MAP中所有KEY的数组（ARRAY）
 * load(url,param,key)	通过url初始化Map对象
 * 例子：
 * var map = new Map();
 *
 * map.put("key", "value");
 * var val = map.get("key")
 * ……
 * map.load("aaa.action",{userId:12345},"id");第三个参数key可选，默认为"id",加载后的数据以key为键,其对应的json对象为值
 */
function Map() {
    this.elements = {};
    this.length=0;
    //获取MAP元素个数
    this.size = function() {
        return this.length;
    };

    //判断MAP是否为空
    this.isEmpty = function() {
        return this.length < 1;
    };

    //删除MAP所有元素
    this.clear = function() {
        this.elements = {};
        this.length=0;
    };

    //向MAP中增加元素（key, value) 
    this.put = function(_key, _value) {
    	if(this.elements[_key]==null){
    		this.length+=1;
        }
    	this.elements[_key]=_value;
    };

    //删除指定KEY的元素，成功返回True，失败返回False
    this.removeByKey = function(_key) {
    	if(this.elements[_key]!=null){
    		delete this.elements[_key];
            this.length-=1;
        }
    };
    
    //获取指定KEY的元素值VALUE，失败返回NULL
    this.get = function(_key) {
        return this.elements[_key];
    };

    //判断MAP中是否含有指定KEY的元素
    this.containsKey = function(_key) {
        if(this.elements[_key]!=null){
        	return true;
        }
        else{
        	return false;
        }
    };

    
    //获取MAP中所有VALUE的数组（ARRAY）
    this.values = function() {
        var arr = new Array();
        for (var key in this.elements) {
            arr.push(this.elements[key]);
        }
        return arr;
    };
    

    //获取MAP中所有KEY的数组（ARRAY）
    this.keys = function() {
    	var arr = new Array();
        for (var key in this.elements) {
            arr.push(key);
        }
        return arr;
    };    
    
    //通过json对象初始化Map对象
    this.loadByJsonArray=function(jsonArray,key){
    	if(key==null)key="id";
    	this.elements={};
    	this.length=0;
    	if(jsonArray!=null&&jsonArray.length>0){
	    	for(var i=0;i<jsonArray.length;i++){
				var json=jsonArray[i];
				if(this.elements[json[key]]==null){
		        	this.length+=1;
		        }
				this.elements[json[key]]=json;
			}
    	}
    };
  //通过json对象初始化Map对象
    this.appendByJsonArray=function(jsonArray,key){
    	if(key==null)key="id";
    	if(jsonArray!=null&&jsonArray.length>0){
	    	for(var i=0;i<jsonArray.length;i++){
				var json=jsonArray[i];
				if(this.elements[json[key]]==null){
		        	this.length+=1;
		        }
				this.elements[json[key]]=json;
			}
    	}
    };
    this.clone=function(){
    	var newMap=new Map();
    	for (var key in this.elements) {
            newMap.put(key,this.elements[key]);
        }
    	return newMap;
    };
    //调试专用
    this.alertAll=function(){
    	var str="";
    	for (var key in this.elements) {
            str+=key+",";
        }
    	alert(str);
    };
}



//打开快速录入模板
var win;
function openFastComment(module, commentId, fun, append) {
	 
	var dhxWins = new dhtmlXWindows();
	dhxWins.setImagePath("${ctx}/scripts/dhtmlxSuite/dhtmlx_std_full/imgs/");
//	dhxWins.enableAutoViewport(false);
//	dhxWins.setViewport(0, 0, $(parent.document.body).width(), $(parent.document.body).height(), parent.document.body);
//	dhxWins.attachViewportTo(parent.document.body);
	var width = 1000;
	var height = 600;
	var x = ($(document.body).width() - width) / 2;
	var y = ($(document.body).height() - height) / 2;
	win = dhxWins.createWindow("fastComment", x, 0, width, height);// 自定义位置和宽度、高度
	win.setText("快速录入模板");
	 
	var url = encodeURI('${ctx}/lab/fastComment.action?module=' + module + "&commentId=" + commentId);// module为空则查询所有的录入模板
	 
	if (fun) {
		url += "&fun=" + fun;
	}
	if (append == true) {
		url += "&append=" + append;
	}
	 
	win.button("minmax1").hide();
	win.button("park").hide();
	//win.button("close").attr("");
	 
	win.attachURL(url);
	 
	win.setModal(true);
}




//打开快速录入模板
var win;
function openFastCommentbytangan(module, commentId, fun, append) {
	 
	var dhxWins = new dhtmlXWindows();
	dhxWins.setImagePath("${ctx}/scripts/dhtmlxSuite/dhtmlx_std_full/imgs/");
//	dhxWins.enableAutoViewport(false);
//	dhxWins.setViewport(0, 0, $(parent.document.body).width(), $(parent.document.body).height(), parent.document.body);
//	dhxWins.attachViewportTo(parent.document.body);
	var width = 1000;
	var height = 600;
	var x = ($(document.body).width() - width) / 2;
	var y = ($(document.body).height() - height) / 2;
	win = dhxWins.createWindow("fastComment", x, 0, width, height);// 自定义位置和宽度、高度
	win.setText("快速录入模板");
	 
	var url = encodeURI(ctx+'/lab/fastComment.action?module=' + module + "&commentId=" + commentId);// module为空则查询所有的录入模板
	 
	if (fun) {
		url += "&fun=" + fun;
	}
	if (append == true) {
		url += "&append=" + append;
	}
	 
	win.button("minmax1").hide();
	win.button("park").hide();
	//win.button("close").attr("");
	 
	win.attachURL(url);
	 
	win.setModal(true);
}







function build2ULayout(target, leftWidth, leftText, rightText){
	var dhxLayoutData = {
			parent : target,
			pattern : "2U",
			cells : [ {
				text:'<div style="font-weight:normal;">'+leftText+'</div>', 
				width : leftWidth,
				header : true,
				//fix_size : [ true, null ],
				id : "a"
			}, {
				text:'<div style="font-weight:normal;">'+rightText+'</div>', 
				header : true,
				//fix_size : [ true, null ],
				id : "b"
			}]
		};
	
		return dhxLayoutData;
}





//通用Grid加载函数
function buildGrid(paramJson,autoFirst,finishCallback){
	var target=paramJson.grid;
	var url=paramJson.grid_url;
	var param=paramJson.grid_param();
	var div=paramJson.div_id;
	var initCallback=paramJson.grid_init;
	var event=paramJson.grid_event;	
	$.post(url,param,function(data) {
		if (data != null && data != "null" && data != "") {
			if(target==null){
				//创建dhtmlxGrid对象
				var grid = new dhtmlXGridObject(div);
				grid.setImagePath(IMG_BASEPATH_GRID);
				target=initCallback(grid);
				paramJson.grid=target;
				if(event!=null){
					for (var key in event){ 
						target.attachEvent(key,event[key]);
					}
				}		
			}	
			else{
				target.clearAll();
			}
			target.parse(data);
			paramJson.grid=target;
			if (target.getRowsNum()>0&&autoFirst!=false) {
				target.selectRow(0, true, true, true);
			}
		} else {
			target = null;
			$("#"+div).html("<br/><h3 align='center'>数据异常</h3>");
		}
		if(finishCallback!=null){
			finishCallback(target);
		}
	}, "text");
}

//快捷键定义
function hotKey(target, code){
	$("*").keydown(function (e) {
        e = window.event || e || e.which;
        if (e.keyCode == code) {
        	// button被禁用了
	       	if(target.attr("disabled") == 'disabled' || target.attr("disabled") == true){
	    		return false;
	    	}
        	
        	target.trigger("click");
            e.keyCode = 0;
            return false;
        }
    });
}

//F2
function hotKeyF2(target){
	hotKey(target,113);
}

//F3
function hotKeyF3(target){
	hotKey(target,114);
}

//F4
function hotKeyF4(target){
	hotKey(target,115);
}

//F5
function hotKeyF5(target){
	hotKey(target,116);
}

//F6
function hotKeyF6(target){
	hotKey(target,117);
}

//F7
function hotKeyF7(target){
	hotKey(target,118);
}

//F8新增
function hotKeyF8(target){
	hotKey(target, 119);
}

//F9
function hotKeyF9(target){
	hotKey(target,120);
}

//F10保存
function hotKeyF10(target){
	hotKey(target, 121);
}

//F11
function hotKeyF11(target){
	hotKey(target, 122);
}

//F12删除
function hotKeyF12(target){
	hotKey(target, 123);
}

//遮罩方法
function blockUI(msg){
	if(msg == null)
		msg = '<div style="height:60px;font-size:24px;font-weight:bold;color:#000;line-height:60px;"><img src="../images/busy.gif"/> 正在处理,请稍后...</div>';
	$.blockUI({
 		 message: msg,
 		 css: {border: '3px solid #a00'}
   	 	 //,overlayCSS: {backgroundColor: '#E8E8E8'} 
   		 ,overlayCSS: {opacity:0} 
  	 });
}

function unblockUI(){
	$.unblockUI();
}

//DefectId:84
var msgDiv = parent.mainMessage;
$(msgDiv).empty();





/*新的Grid*/
var GRID_PARAM_STANDARD={
	/*必填内容*/
	div_id:"someDiv",												//对应DIV的id
	width:500,														//Grid的宽度
	height:500,														//Grid的宽度
	grid_url:"",													//表格数据加载的url	
	grid_init:function(grid){},										//表格初始化方法				
	/*选填内容*/
	grid_eventMapping:null,											//绑定事件
	grid_url_param:function(){},									//url对应参数
	grid_colOrder:null,												//列顺序
	grid_scroll_callback:null,										//滚动条滚动加载数据后的回调
	grid_select_first:true											//默认选中第一条
};
var COMBO_PARAM_STANDARD={
	/*必填内容*/ 
	div_id:"someDiv",												//对应DIV的id
	width:500,														//Combo的宽度
	grid_url:"",													//表格数据加载的url	
	grid_init:function(grid){},										//表格初始化				
	/*选填内容*/
	name:"",														//表单中combo对应的name
	validate:true,													//是否打开对非Grid中数据的验证和重置操作,如果为false输入非Grid数据时会以输入值作为Value提交
	grid_url_param:function(textValue){return {searchStr:textValue};},//url对应参数
	displayByGrid:function(dto){return "";},						//选择后显示在文本框中的内容
	grid_width:500,													//表格宽
	grid_height:300,												//表格高
	grid_position:"down",											//表格显示位子(up/down)		--开发中
	grid_align:"left",												//表格对齐方式(left/right)	--开发中
	grid_onChange:function(){},										//表格行的选择事件
	grid_colOrder:null												//表格列的列表，数组类型，例:["id","uniqueCode","cnName"]	
};
var TEXT_PARAM_STANDARD={
	/*必填内容*/ 
	div_id:"someDiv",												//对应DIV的id
	width:500,														//Combo的宽度
	grid_url:"",													//表格数据加载的url	
	grid_init:function(grid){},										//表格初始化				
	/*选填内容*/
	name:"",														//表单中combo对应的name
	grid_url_param:function(textValue){return {searchStr:textValue};},//url对应参数
	displayByGrid:function(dto){return "";},						//选择后显示在文本框中的内容
	grid_width:500,													//表格宽
	grid_height:300,												//表格高
	grid_position:"down",											//表格显示位子(up/down)		--开发中
	grid_align:"left",												//表格对齐方式(left/right)	--开发中
	grid_onChange:function(){},										//表格行的选择事件
	grid_colOrder:null												//表格列的列表，数组类型，例:["id","uniqueCode","cnName"]	
};
//初始化表格，只有结构和事件，没有数据
var NipGrid=function(param){
	var defaultParam=cloneJson(GRID_PARAM_STANDARD);
	//使用传递的参数覆盖默认参数
	for(var key in param){
		if(param[key]!=null){
			defaultParam[key]=param[key];
		}
	}	
	var div=defaultParam.div_id;					//总DivId
	var widthStr=defaultParam.width;				//宽度
	var heightStr=defaultParam.height;				//高度
	var width=null;
	var height=null;
	var init=defaultParam.grid_init;				//表格的初始化函数
	var url=defaultParam.grid_url;					//表格加载数据的url
	var gridObj=null;								//表格对象
	var eventMapping=defaultParam.grid_eventMapping;//表格事件
	var loadOver=true;								//用来表示Ajax加载数据是否完成,true为已加载完成
	var colOrder=defaultParam.grid_colOrder;		//表格列数组
	var needLoad=true;								//当前查询对应的数据是否都已加载完毕，未加载完毕为true
	var currentPage=1;								//当前页
	var pageSize=30;								//每页条数
	var scrollCallback=defaultParam.grid_scroll_callback;
	var jsonMap=new Map();							//表格数据对应的map对象	
	var selFirst=defaultParam.grid_select_first;
	var urlParam=function(){						//表格加载数据所带参数
		var dparam=defaultParam.grid_url_param();
		if(dparam==null){
			dparam={};
		}
		return dparam;
	};
	var onGridScroll=function(sLeft,sTop){
		//$("#urineVolume").val(sLeft+"-"+sTop+"-"+height);
		var h=gridObj.getRowsNum()*21+25-height;		
		if(sTop>=h&&needLoad){
			updateByJson(scrollCallback,true);
		}
	};
	var updateByXml=function(finishCallback){
		loadOver=false;
		$.post(url,urlParam(),function(data) {
			gridObj.clearAll();
			if (data != null && data != "null" && data != "") {			
				gridObj.parse(data);
				loadOver=true;
				if(finishCallback!=null){
					finishCallback();
					if(gridObj.getRowsNum()>0&&selFirst==true){
						if(gridObj.getSelectedRowId()==null){
							gridObj.selectRow(0,true);
						}
					}
				}
			}
		}, "text");
	};
	var updateByJson=function(finishCallback,append){
		if(loadOver==false) return;
		loadOver=false;
		if(append!=true){
			gridObj.clearAll();
			currentPage=1;
			needLoad=true;
			jsonMap.clear();
			gridObj.attachEvent("onScroll",onGridScroll);
		}
		var pa=urlParam();
		pa.comboCurrPage=currentPage;
		pa.comboPageSize=pageSize;
		/*var aaa="";
		for(var key in pa){
			aaa+=key+"-"+pa[key]+"\n";
		}
		alert(aaa);*/
		//alert(url+"\n"+pa);
		$.post(url,pa,function(data) {
			var jsonArray=null;
			if (data != null && data != "null" && data != "") {	
				jsonArray= parseByJson(data);				
				jsonMap.appendByJsonArray(jsonArray);				
				currentPage++;				
				if(jsonArray.length<30){
					needLoad=false;
				}
			}
			else{
				needLoad=false;
			}
			if(finishCallback!=null){
				finishCallback(jsonArray);
				if(gridObj.getRowsNum()>0&&selFirst==true){
					if(gridObj.getSelectedRowId()==null){
						gridObj.selectRow(0,true);
					}
				}
			}
			loadOver=true;
		}, "text");
	};
	var getJsonById=function(id){
		if(jsonMap.containsKey(id)){
			return jsonMap.get(id);
		}
		else{
			return null;
		}
	};
	var parseByJson=function(data){
		var jsonArray=eval("("+data+")");
		for(var i=0;i<jsonArray.length;i++){
			var json=jsonArray[i];
			var text="";
			var id=json.id!=null?json.id:(new Date()).valueOf();//有id就取id，没有就用当前时间当id			
			if(colOrder!=null){
				for(var j=0;j<colOrder.length;j++){
					var key=colOrder[j];
					if(key=="id") continue;
					text+=json[key]+",";
				}
			}
			else{
				for(var key in json){
					if(key=="id") continue;
					text+=json[key]+",";
				}
			}
			text=text.substring(0,text.length-1);
			gridObj.addRow(id,text);
		}
		return jsonArray;
	};
	$("#"+div).css("width",widthStr).css("height",heightStr);
	width=$("#"+div).width();
	height=$("#"+div).height();
	gridObj=new dhtmlXGridObject(div);		//表格的DHtmlX对象	
	gridObj.setImagePath(IMG_BASEPATH_GRID);
	init(gridObj);
	gridObj.enableRowsHover(true,"selectHover");
	if(eventMapping!=null){
		for (var key in eventMapping){ 
			gridObj.attachEvent(key,eventMapping[key]);
		}
	}
	this.loadByXml=updateByXml;						//通过xml方式加载数据，不支持分页，传入回调函数
	this.loadByJson=updateByJson;					//通过json方式加载数据，与楼上无法并行
	/*
	 * var aaa=new NipGrid(param);
	 * aaa.loadByJson(function(jsonArray){
	 * 		回调在数据加载完成并渲染到Grid以后才调用，jsonArray是加载到的json数组
	 * });
	 * 
	 * */
	this.getGridObject=function(){return gridObj;};	//获得Grid对象
	this.inProcess=function(){return !loadOver;};	//判断当前Grid是否正在处理数据，处理时不要对Grid进行任何操作
	this.getJsonById=getJsonById;					//通过行id获得对应的json对象
	this.getCurrentPage=function(){return currentPage;};//当前页码
	this.getPageSize=function(){return pageSize;};//每页记录数
	this.getNeedLoad=function(){return needLoad;};
	this.clearAll=function(){//清空网格数据，并防止滚动事件
		needLoad=false;	
		gridObj.clearAll();
	};
};
var NipCombo=function(param){
	/*初始化私有变量和方法*/	
	var index=comboIndex++;							//当前Combo的序列号
	var defaultParam=cloneJson(COMBO_PARAM_STANDARD);//克隆的默认参数
	//使用传递的参数覆盖默认参数
	for(var key in param){
		if(param[key]!=null){
			defaultParam[key]=param[key];
		}
	}
	//定义基本参数(外部)
	var div=defaultParam.div_id;					//总DivId
	var width=defaultParam.width;					//整个Combo宽度
	var name=defaultParam.name;						//表单提交时的name
	var check=defaultParam.validate;				//是否验证
	var gwidth=defaultParam.grid_width;				//表格宽度
	var gheight=defaultParam.grid_height;			//表格高度
	var init=defaultParam.grid_init;				//表格的初始化函数
	var url=defaultParam.grid_url;					//表格加载数据的url
	var urlParam=defaultParam.grid_url_param;		//表格加载数据所带参数
	var displayText=defaultParam.displayByGrid;		//选择表格数据后显示在文本框中的内容
	var change=defaultParam.grid_onChange;			//选择表格数据后所执行的业务事件
	var grid_colOrder=defaultParam.grid_colOrder;	//表格列对应数组
	//定义基本参数(内部)
	var gridId="comboGrid"+index;					//放置表格的DivId
	var textId="comboText"+index;					//文本框Id
	var hideTextId="comboHidden"+index;				//隐式文本框Id，用来提交表单
	var btnDivId="comboBtn"+index;					//放置清除和下拉按钮的DivId
	var loadOver=true;								//用来表示Ajax加载数据是否完成,true为已加载完成
	var currentJson=null;							//选择行对应的Json对象
	var nipGrid=null;								//表格对象		
	var eventMapping={};							//表格事件
	var gridFocus=false;							//判断当前Grid是否正在操作
	var nipGridParam={								//表格参数
		/*必填内容*/
		div_id:gridId,												
		width:gwidth,												
		height:gheight,					
		grid_url:url,												
		grid_init:init,
		grid_url_param:function(){return urlParam(trim(getText()));},
		grid_colOrder:grid_colOrder,
		grid_eventMapping:eventMapping,
		grid_select_first:false
	};
	
	//定义基本方法(内部)
	var focus=function(){
		$("#"+textId).focus();
	};
	//定义基本方法(内部)
	var disable=function(){
		$("#"+textId).attr("disabled","disabled");
		$("#"+btnDivId+" a").unbind("click");
	};
	var enable=function(){
		$("#"+textId).removeAttr("disabled");
		$("#"+btnDivId+" a").unbind("click");
		$("#"+btnDivId+" a.btn").bind("click",onComboClick);
		$("#"+btnDivId+" a.clear").bind("click",onComboClear);
	};
	var setText=function(val){
		$("#"+textId).unbind("propertychange",onTextChange );
		$("#"+textId).val(val);
		$("#"+textId).bind("propertychange",onTextChange );
	};
	var getText=function(){
		return $("#"+textId).val();
	};	
	var clear=function(){						//清空文本框内容不触发事件
		setText("");
		setValue("");
		currentJson=null;
	};
	var setValue=function(val){
		$("#"+hideTextId).val(val);
	};
	var getValue=function(){
		return $("#"+hideTextId).val();
	};	
	var hideGrid=function(){
		$("#"+gridId).hide();
	};
	var validate=function(){
		var text=$("#"+textId).val();
		if(check){
			var textByJson=displayText(currentJson);
			return textByJson==text;			
		}
		else{
			return text!=null&&text!="";
		}
	};
	var reset=function(){
		initCombo(currentJson);
	};
	var getGridObj=function(){
		return nipGrid.getGridObject();
	};
	var initCombo=function(json){
		if(json!=null&&isJson(json)){
			if(json["id"]!=null){
				setValue(json["id"]);
				setText(displayText(json));
				currentJson=json;
			}
		}
	};
	//定义基本方法(外部)	
	this.validate=validate;					//验证文本框内容是否与所选择的行匹配
	this.initCombo=initCombo;				//通过一个Json对象来初始化Combo
	this.setText=setText;					//设置文本内容，不会触发查询
	this.getValue=getValue;					//获得当前Combo的value，也就是所选行Id
	this.getText=getText;					//获得文本内容
	this.getGridObj=getGridObj;				//获得Grid对象
	this.reset=reset;						//重置为所选行对应内容
	this.clear=clear;						//清除内容，不会触发查询
	this.disable=disable;					//禁用
	this.enable=enable;						//启用
	this.focus=focus;						//文本框获得焦点
	//定义事件
	var onTextChange=function() {			//文本框内容改变事件
		//数据通过Ajax加载的时候忽略事件
		if(nipGrid.inProcess()) return;					
		//文本框为焦点时才触发事件
		var act = document.activeElement.id;		
		if(act!=textId)return;
		if(!check){
			setValue(getText());
		}
		//如果清空文本框则清空value，清空时触发业务事件
		if($("#"+textId).val()==""){
			clear();
			hideGrid();
			change(currentJson);
			return;
		}
		//当文本框的值匹配的时候不作任何操作
		if($("#"+textId).val()==displayText(currentJson))return;
		//延迟半秒进行查询
		if(inLazy==true){
			clearTimeout(timeout);
			timeout=setTimeout("changeLazy('"+textId+"')",500);
			return;
		}
		inLazy=true;
		open();
	};			
	var open=function(){
		nipGrid.loadByJson(function(jsonArray){
			var grid=nipGrid.getGridObject();
			if(grid.getRowsNum()>0){
				grid.selectRow(0);
			}
			$("#"+gridId).show();
			$("#"+textId).focus();
		});
	};
	var onComboClear=function(){
		clear();
		hideGrid();
		$("#"+textId).focus();
	};
	var onComboClick=function(){			//Combo按钮点击事件
		if(loadOver==false) return;
		gridFocus=true;
		if($("#"+gridId+":hidden").size()>0){
			var text=getText();
			setText("");
			open();		
			if(!check){
				setText(text);
				setValue(text);
			}
		}
		else{
			hideGrid();
			if(check){
				reset();
			}
		}
	};
	var onTextKeyDown=function(event){			//文本框按键事件
		if(nipGrid.inProcess()) return;			
		var isHide=$("#"+gridId+":hidden").size()>0;	
		var gridObj=nipGrid.getGridObject();
		//显示按上——选中上一条，如果选中第一条则无操作
		if(event.keyCode==38&&!isHide){				
			var index=gridObj.getRowIndex(gridObj.getSelectedRowId());
			if(index>0){						
				gridObj.selectRow(index-1);
				$("#"+textId).focus();
			}
			return;
		}
		//显示按下——选中下一条，如果选中最后一条则无操作
		if(event.keyCode==40&&!isHide){
			var index=gridObj.getRowIndex(gridObj.getSelectedRowId());
			var rowsNum=gridObj.getRowsNum();
			if(index<rowsNum-1){						
				gridObj.selectRow(index+1);
				$("#"+textId).focus();
			}
			return;
		}
		//隐藏回车——清空并查询所有
		if(event.keyCode==13&&isHide){
			if(validate()){
				change(currentJson);
				return;
			}
			setText("");
			open();
		} 
		//显示回车——提交选中
		if(event.keyCode==13&&!isHide){					
			if(gridObj.getRowsNum()==0) return;
			var id=gridObj.getSelectedRowId();
			var json=nipGrid.getJsonById(id);
			initCombo(json);
			hideGrid();
			change(currentJson);
		}
	};
	var onTextBlur=function(event){			//文本框失去焦点事件
		setTimeout(function(){onblurEventDelay(event);}, 300);
	};
	var onblurEventDelay=function(event){
		if(gridFocus==false){
			hideGrid();
			if(check){
				reset();
			}
			else{
				setValue(getText());
			}
		}
		else{
			$("#"+textId).focus();
			gridFocus=false;
		}
	};
	
	
	var onGridRowSelect=function(id,ind){	//表格行选中事件
		var json=nipGrid.getJsonById(id);
		initCombo(json);
		hideGrid();
		change(currentJson);
		$("#"+textId).focus();
	};
	
	/*NipCombo的初始化和构造*/
	//1、创建对应页面元素，配置样式和属性	
	$("#"+div)
	.css("width",width)
	.addClass("comboDiv")
	.append(
		$("<div></div>")
		.attr("id",btnDivId)
		.addClass("textDiv")
		.append(
			$("<input/>")
			.attr("id",textId)
			.css("width",width-(isIE?40:34))
		)
		.append(
			$("<input/>")
			.attr("type","hidden")
			.attr("id",hideTextId)
			.attr("name",name)
		)
		.append($("<a></a>").addClass("clear"))
		.append($("<a></a>").addClass("btn"))
		.append("<p/>")
	).append(
		$("<div></div>")
		.css("width",gwidth)
		.css("height",gheight)
		.attr("id",gridId)
		.addClass("gridDiv")
		.hide()
	);
	//2、绑定文本框事件
	$("#"+textId)
	.bind("input",onTextChange)
	.bind("keydown",onTextKeyDown)
	.bind("blur",onTextBlur);	
	//3、绑定Combo下拉按钮点击事件
	$("#"+div+" a.btn").click(onComboClick);
	$("#"+div+" a.clear").click(onComboClear);	
	
	//4、初始化Grid
	eventMapping.onRowSelect=onGridRowSelect;
	nipGrid=new NipGrid(nipGridParam);	
};

//延迟调用文本框内容改变事件
function changeLazy(textId){
	inLazy=false;
	$("#"+textId).trigger("input");
}

//判断是否是JSON对象
function isJson(obj){
	var isjson=typeof(obj)=="object"
	&& Object.prototype.toString.call(obj).toLowerCase() == "[object object]" 
	&& !obj.length;    
	return isjson;
}

//克隆json对象
function cloneJson(para) {
	var rePara = null;
	var type = Object.prototype.toString.call(para);
	if (type.indexOf("Object") > -1) {
		rePara = jQuery.extend(true, {}, para);
	} else if (type.indexOf("Array") > 0) {
		rePara = [];
		jQuery.each(para, function(index, obj) {
			rePara.push(jQuery.cloneJSON(obj));
		});
	} else {
		rePara = para;
	}
	return rePara;
}

$(document).ready(function(){
	$("#countLab").parent().hide();
	$("#countLab1").parent().hide();
	$("#countLab2").parent().hide();
	$("#countLab3").parent().hide();
});

//form序列化之前清除文本框空格
function formTextTrim(form){
	var formData = jQuery("form input:text");
	if(form !=null && form!=""){
		formData = jQuery("#"+form+" input:text");
	}
	formData.each(function(){
		if(jQuery(this).val() !=null){
			jQuery(this).val(trim(jQuery(this).val()));
		}
	});
}
//搜索区域文本框 按Enter键 触发搜索按钮搜索事件
function keyEnter(event,searchBtn){
	if(event.keyCode==13){
		$("#"+searchBtn).click();
	}
}

//大数据量网格，采取分页加载
var NipBigGrid=function(param){
	var defaultParam=cloneJson(GRID_PARAM_STANDARD);
	//使用传递的参数覆盖默认参数
	for(var key in param){
		if(param[key]!=null){
			defaultParam[key]=param[key];
		}
	}	
	var div=defaultParam.div_id;					//总DivId
	var widthStr=defaultParam.width;				//宽度
	var heightStr=defaultParam.height;				//高度
	var width=null;
	var height=null;
	var init=defaultParam.grid_init;				//表格的初始化函数
	var url=defaultParam.grid_url;					//表格加载数据的url
	var gridObj=null;								//表格对象
	var eventMapping=defaultParam.grid_eventMapping;//表格事件
	var loadOver=true;								//用来表示Ajax加载数据是否完成,true为已加载完成
	var colOrder=defaultParam.grid_colOrder;		//表格列数组
	var needLoad=true;								//当前查询对应的数据是否都已加载完毕，未加载完毕为true
	var currentPage=1;								//当前页
	var pageSize=defaultParam.pageSize==null?30:defaultParam.pageSize;//每页条数
	var scrollCallback=defaultParam.grid_scroll_callback;
	var jsonMap=new Map();							//表格数据对应的map对象	
	var selFirst=defaultParam.grid_select_first;
	var urlParam=function(){						//表格加载数据所带参数
		var dparam=defaultParam.grid_url_param();
		if(dparam==null){
			dparam={};
		}
		return dparam;
	};
	var onGridScroll=function(sLeft,sTop){
		//$("#urineVolume").val(sLeft+"-"+sTop+"-"+height);
		var h=gridObj.getRowsNum()*21+25-height;		
		if(sTop>=h&&needLoad){
			updateByJson(scrollCallback,true);
		}
	};
	var updateByXml=function(finishCallback){
		loadOver=false;
		$.post(url,urlParam(),function(data) {
			gridObj.clearAll();
			if (data != null && data != "null" && data != "") {			
				gridObj.parse(data);
				loadOver=true;
				if(finishCallback!=null){
					finishCallback();
					if(gridObj.getRowsNum()>0&&selFirst==true){
						if(gridObj.getSelectedRowId()==null){
							gridObj.selectRow(0,true);
						}
					}
				}
			}
		}, "text");
	};
	var updateByJson=function(finishCallback,append){
		if(loadOver==false) return;
		loadOver=false;
		if(append!=true){
			gridObj.clearAll();
			currentPage=1;
			needLoad=true;
			jsonMap.clear();
			gridObj.attachEvent("onScroll",onGridScroll);
		}
		var pa=urlParam();
		pa.comboCurrPage=currentPage;
		pa.comboPageSize=pageSize;
		blockUI("<h1>正在加载数据...</h1>");
		$.post(url,pa,function(data) {
			var jsonArray=null;
			if (data != null && data != "null" && data != "") {	
				jsonArray= parseByJson(data);				
				jsonMap.appendByJsonArray(jsonArray);				
				currentPage++;
				unblockUI();
				if(jsonArray.length<pageSize){
					needLoad=false;
					
				}
			}
			else{
				needLoad=false;
			}
			if(finishCallback!=null){
				finishCallback(jsonArray);
			}
			loadOver=true;
			/*if(currentPage>1&&needLoad){
				updateByJson(scrollCallback,true);
			}*/
			if(gridObj.getRowsNum()>0&&selFirst==true){
				if(gridObj.getSelectedRowId()==null){
					gridObj.selectRow(0,true);
				}
			}
		}, "text");
	};
	var getJsonById=function(id){
		if(jsonMap.containsKey(id)){
			return jsonMap.get(id);
		}
		else{
			return null;
		}
	};
	var parseByJson=function(data){
		var jsonArray=eval("("+data+")");
		for(var i=0;i<jsonArray.length;i++){
			var json=jsonArray[i];
			var text="";
			var id=json.id!=null?json.id:(new Date()).valueOf();//有id就取id，没有就用当前时间当id			
			if(colOrder!=null){
				for(var j=0;j<colOrder.length;j++){
					var key=colOrder[j];
					if(key=="id") continue;
					text+=json[key]+",";
				}
			}
			else{
				for(var key in json){
					if(key=="id") continue;
					text+=json[key]+",";
				}
			}
			text=text.substring(0,text.length-1);
			gridObj.addRow(id,text);
		}
		return jsonArray;
	};
	$("#"+div).css("width",widthStr).css("height",heightStr);
	width=$("#"+div).width();
	height=$("#"+div).height();
	gridObj=new dhtmlXGridObject(div);		//表格的DHtmlX对象	
	gridObj.setImagePath(IMG_BASEPATH_GRID);
	init(gridObj);
	gridObj.enableRowsHover(true,"selectHover");
	if(eventMapping!=null){
		for (var key in eventMapping){ 
			gridObj.attachEvent(key,eventMapping[key]);
		}
	}
	this.loadByXml=updateByXml;						//通过xml方式加载数据，不支持分页，传入回调函数
	this.loadByJson=updateByJson;					//通过json方式加载数据，与楼上无法并行
	/*
	 * var aaa=new NipGrid(param);
	 * aaa.loadByJson(function(jsonArray){
	 * 		回调在数据加载完成并渲染到Grid以后才调用，jsonArray是加载到的json数组
	 * });
	 * 
	 * */
	this.getGridObject=function(){return gridObj;};	//获得Grid对象
	this.inProcess=function(){return !loadOver;};	//判断当前Grid是否正在处理数据，处理时不要对Grid进行任何操作
	this.getJsonById=getJsonById;					//通过行id获得对应的json对象
	this.getCurrentPage=function(){return currentPage;};//当前页码
	this.getPageSize=function(){return pageSize;};//每页记录数
	this.getNeedLoad=function(){return needLoad;};
	this.clearAll=function(){//清空网格数据，并防止滚动事件
		needLoad=false;	
		gridObj.clearAll();
	};
};

/**
 * 检查日期范围
 */
var checkDate = {
	maxDays : 30	//最大天数范围
}
