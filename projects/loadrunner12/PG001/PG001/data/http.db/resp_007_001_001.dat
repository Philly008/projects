var theme = "energyblue";

/**
 * 对Date的扩展，将 Date 转化为指定格式的String
 * (new Date()).format("yyyy-MM-dd hh:mm:ss.S") -> 2013-05-26 22:05:05.999 
 */
Date.prototype.format = function(fmt) {
	var o = {
		//月份
		"M+" : this.getMonth() + 1,
		//日
		"d+" : this.getDate(),
		//小时
		"h+" : this.getHours(),
		//分
		"m+" : this.getMinutes(),
		//秒
		"s+" : this.getSeconds(),
		//季度
		"q+" : Math.floor((this.getMonth() + 3) / 3),
		//毫秒
		"S" : this.getMilliseconds()	
	};
	
	if (/(y+)/.test(fmt)){
		fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	}
	for (var k in o){
		if (new RegExp("(" + k + ")").test(fmt)){
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]):(("00" + o[k]).substr(("" + o[k]).length)));
		}
	}
	return fmt;
};

function objectClick(obj, href){
	obj.load(href);
}

/**
 * 替换字符串
 * @param str
 * @param oldStr
 * @param newStr
 * @returns
 */
function replaceAll(str, oldStr, newStr){
	 var reg=new RegExp(oldStr,"g"); //创建正则RegExp对象
	 return str.replace(reg,newStr);
}

function replaceAll2(str, oldStr, newStr){
	var reg = new RegExp(oldStr.replace(/([\(\)\[\]\{\}\^\$\+\-\*\?\.\"\'\|\/\\])/g,"\\$1"),"ig");
	return str.replace(reg,newStr);

}

/**
 * 检验下拉框必填
 * @param objs
 * @param msgs
 * @returns {Boolean}
 */
function checkComboMustSelect(objs,msgs){
	for(var i=0;i<objs.length;i++){
		if(objs[i].getSelectedValue()==null || objs[i].getSelectedValue()==""){
			objs[i].setComboText("");
			objs[i].openSelect();
			jAlert(msgs[i] + "不能为空，请重新输入！","提示信息");
			return false;
		}
	}
	return true;				
}

/**
 * 检验下拉框必填
 * @param ids
 * @param msgs
 * @returns {Boolean}
 */
function checkSelectMustSelect(ids,msgs){
	for(var i=0;i<ids.length;i++){
		var id = "#" + ids[i];
		var selValue = $(id).find('option:selected').val();
		if(selValue=="" || selValue=="-1"){
			$(id).focus();
			jAlert(msgs[i] + "必须选择！","提示信息");
			return false;
		}
	}
	return true;				
}

/**
 * 检核字段不能为空
 * @param ids
 * @param msgs
 * @returns {Boolean}
 */
function checkTextNotNull(ids,msgs){
	for(var i=0;i<ids.length;i++){
		var id = "#" + ids[i];
		if(trim($(id).val())==""){
			$(id).select();
			jAlert(msgs[i] + "不能为空，请重新输入！","提示信息");
			return false;
		}
	}
	return true;				
}

 /**
  * 检核字段不能为空
  * @param ids
  * @param msgs
  * @returns {Boolean}
  */
 function checkTextNotNull2(ids,msgs){
 	for(var i=0;i<ids.length;i++){
 		var id = "#" + ids[i];
 		if(trim($(id).val())==""){
 			$(id).select();
 			jAlert(msgs[i] + "不能为空，请重新输入！","提示信息");
 			return false;
 		}
 	}
 	return true;				
 }
/**
 * 校验所有输入域是否含有特殊符号
 * 所要过滤的符号写入正则表达式中，注意，一些符号要用'\'转义.
 * 试例：if(checkAllTextValid(document.forms[0]))
 * fadeInMessage("表单中所有文本框通过校验！");
 * @param form
 * @returns {Boolean}
 */
function checkAllTextValid(form) {
	//记录不含引号的文本框数量
	var check = true;
	var pattern = new RegExp("[`~!@#$%^&*()+=|{}':;',\\[\\].<>\/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]");
	for ( var i = 0; i < form.elements.length; i++) {
		if (form.elements[i].type == "text") {
			if(pattern.test(form.elements[i].value)){
				form.elements[i].select();
				check = false;
				jAlert("文本框中不能含有特殊字符，请检查输入！","提示信息");
				break;
			}
		}		
	}
	return check;
}

/**
 * 验证特殊字符
 * @param str
 * @returns {Boolean}
 */
function checkTextValid(str) {
	var pattern = new RegExp("[`~!@#$%^&*()+=|{}':;',\\[\\].<>\/?~！@#￥%……&*（）——+|{}《》【】‘；：”“’。，、？]");
	if (pattern.test(str)) {
		return false;
	}
	return true;
}

/**
 * 验证特殊字符
 * @param str
 * @returns {Boolean}
 */
function checkTextValidNew(str) {
	var pattern = new RegExp("[`~!@#$%^&*()+=|{}':;',\\[\\]<>\/?~！@#￥%……&*（）+|{}《》【】‘；：”“’。，、？]");
	if (pattern.test(str)) {
		return false;
	}
	return true;
}

/**
 * 匹配中文 数字 字母 下划线
 * @param str
 * @returns {Boolean}
 */
function checkInput(str) {
	var pattern = /^[\w\u4e00-\u9fa5]+$/gi;
	if (pattern.test(str)) {
		return false;
	}
	return true;
}
/**
 * 匹配数字 字母
 * @param str
 * @returns {Boolean}
 */
function checkInput2(str) {
	var pattern = /^[0-9a-zA-Z]+$/;
//	var pattern = /^[A-Za-z]+$/;
	if (pattern.test(str)) {
		return false;
	}
	return true;
}

/**
 * 去除特殊字符
 * @param s
 * @returns {String}
 */
function stripScript(s) {
	var pattern = new RegExp("[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~！@#￥%……&*（）——+|{}【】‘；：”“’。，、？]");
	var rs = "";
	for ( var i = 0; i < s.length; i++) {
		rs = rs + s.substr(i, 1).replace(pattern, '');
	}
	return rs;
}

//验证是否存在汉字和全角符号
function isChinese(msg){
	if ((/[^\x00-\xff]/g.test(msg))){
		return true;
	}else{
		return false;
	}
}
/**
 * 匹配中文 英文 空格
 * @param str
 * @returns {Boolean}
 */
function testName(str) {
	if ((/^([a-zA-Z ]+|[\u4e00-\u9fa5]+)$/.test(str))) {
		return true;
	} else {
		return false;
	}
}
/**
 * 匹配数字和小数点
 * @param str
 * @returns {Boolean}
 */
function checkNum(str) {
	if (/^[-]?\d+(\.\d+)?$/.test(str)) {
		return true;
	} else {
		return false;
	}
}

/**
 * 匹配数字和小数点或者英文
 * @param str
 * @returns {Boolean}
 */
function checkNumAndEnglish(str) {
	if (/^([-]?\d+(\.\d+)?|[a-zA-Z]+)$/.test(str)) {
		return true;
	} else {
		return false;
	}
}

/**
 * 生成GUID
 * @returns {String}
 */
function guidGenerator() {
	var guid = "";
	for ( var i = 1; i <= 32; i++) {
		var n = Math.floor(Math.random() * 16.0).toString(16);
		guid += n;
		if ((i == 8) || (i == 12) || (i == 16) || (i == 20))
			guid += "-";
	}
	return guid;
}

/**
 * String函数之LTrim(),用于清除字符串开头的空格\换行符\回车等
 * @param str
 * @returns
 */
function ltrim(str) {
	var pattern = new RegExp("^[\\s]+","gi");
	return str.replace(pattern,"");
}

/**
 * String函数之RTrim(),用于清除字符串结尾的空格\换行符\回车等
 * @param str
 * @returns
 */
function rtrim(str) {
	var pattern = new RegExp("[\\s]+$","gi");
	return str.replace(pattern,"");
}

/**
 * String函数之Trim(),用于清除字符串开头和结尾部分的空格\换行符\回车等
 * @param str
 * @returns
 */
function trim(str) {
	return rtrim(ltrim(str));
}

/**
 * 检验电子邮箱地址的合法性
 * @param str
 * @returns
 */
function checkEmail(str){
	var reg = /^([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/;
	return reg.test(str);
}



/**
 * 批量验证手机号格式
 * @param ids 表单ID
 * @param msg 弹出消息
 */
function checkPhones(ids, msg){
	for(var i=0;i<ids.length;i++){
		var val = $("#" + ids[i]).val();
		if(val != ""){
			if(!checkPhone(val)){
				$("#" + ids[i]).select();
				jAlert(msg[i] + " 格式错误！","提示信息");
				return false;
			}
		}
	}
	return true;
}

/**
 * 批量验证电话格式
 * 匹配格式：
 * 11位手机号码
 * 3-4位区号，7-8位直播号码，1－4位分机号
 * 如：12345678901、1234-12345678-1234
 * @param str
 */
function checkTelOrMobiles(ids, msg){
	var endMsg = " 格式错误！"
		       + "\n正确格式："
		       + "\n13988888888;"
		       + "\n020-88888888/02088888888;"
		       + "\n0755-7777777/07557777777;"
		       + "\n0755-88888888/075500000000;"
		       + "\n020-88888888-0000/020888888880000;";
	for(var i=0;i<ids.length;i++){
		var val = $("#" + ids[i]).val();
		if(val != ""){
			if(!checkTelOrMobile(val)){ 
				jAlert(msg[i] + endMsg,"提示信息");
				$("#" + ids[i]).select();
				return false;
			}
		}
	}
	return true;
}

/**
 * 检验手机号的合法性
 * @param str
 * @returns
 */
function checkPhone(str){
	if(str.length > 20){
		return false;
	}
	
	var reg = /^\d+(\d|-)*\d$/;
	return reg.test(str);
}

/**
 * 验证字符串
 * @param reg 正则表达式
 * @param str 待验证字符串
 * @returns 符合则返回true
 */
function checkTelOrMobile(str){
	//var reg = /((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;
	var phone=/^[1][0-9]{10}$/; 
	var tel=/^[0]{1}[0-9]{2,3}-[0-9]{7,8}$/;
	var tel1=/^[0-9]{7,8}$/;
	if (phone.test(str) || tel.test(str) || tel1.test(str)) {
		return true;
	} else {
		return false;
	}
}

/**
 * 验证字符串
 * @param reg 正则表达式
 * @param str 待验证字符串
 * @returns 符合则返回true
 */
function checkMobile(str){
	//var reg = /((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;
	var phone=/^[1][0-9]{10}$/; 
	if (phone.test(str)) {
		return true;
	} else {
		return false;
	}
}

/**
 * 验证字符串
 * @param reg 正则表达式
 * @param str 待验证字符串
 * @returns 符合则返回true
 */
function checkTel(str){
	//var reg = /((\d{11})|^((\d{7,8})|(\d{4}|\d{3})-(\d{7,8})|(\d{4}|\d{3})-(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1})|(\d{7,8})-(\d{4}|\d{3}|\d{2}|\d{1}))$)/;
	var tel=/^[0]{1}[0-9]{2,3}-[0-9]{7,8}$/;
	var tel1=/^[0-9]{7,8}$/;
	if (tel.test(str) || tel1.test(str)) {
		return true;
	} else {
		return false;
	}
}
/**
 * 检验邮政编码的合法性
 * @param str
 * @returns
 */
function checkPostCode(str){
	if(str.length > 6){
		return false;
	}
	
	var reg = /^[0-9]{6}$/;
	return reg.test(str);
}

/**
 * 计算两个日期的间隔天数
 * @param startDate 开始日 yyyy-MM-dd格式
 * @param endDate 结束日 yyyy-MM-dd格式
 * @returns
 */
function computationDays(startDate, endDate) {  
	var dateArray, sDate, eDate;
	dateArray = startDate.split("-");
	//转换为dd-MM-yyyy格式  
	sDate = new Date(dateArray[1] + '-' + dateArray[2] + '-' + dateArray[0]); 
	dateArray = endDate.split("-");
	eDate = new Date(dateArray[1] + '-' + dateArray[2] + '-' + dateArray[0]);
	//把相差的毫秒数转换为天数
	return parseInt(Math.abs(sDate - eDate)/1000/60/60/24);   
}

/**
 * 批量验证数值，3位整数，2位小数
 * @param str
 * @returns
 */
function check2Scales(ids, msgs){
	for(var i=0;i<ids.length;i++){
		var val = $("#" + ids[i]).val();
		if(val != ""){
			if(!check2Scale(val)){ 
				jAlert(msgs[i] + " 必须为数字，且整数位不超过3位，小数位不超过2位！","提示信息");
				$("#" + ids[i]).select();
				return false;
			}
		}
	}
	return true;
}

/**
 * 验证数值，3位整数，2位小数
 * @param str
 * @returns
 */
function check2Scale(str){
	var reg = /^(?:(?:[1-9]\d{0,2}(?:\.\d{1,2})?)|(?:[0]\.\d{1,2}))$/;
	return reg.test(str);
}

/**
 * 批量验证是否为整数
 * @param ids
 * @param msgs
 * @returns
 */
function checkIntegers(ids, msgs){
	for(var i=0;i<ids.length;i++){
		var val = $("#" + ids[i]).val();
		if(val != ""){
			if(!checkInteger(val)){ 
				jAlert(msgs[i] + "必须为整数！","提示信息");
				$("#" + ids[i]).select();
				return false;
			}
		}
	}
	return true;
}

/**
 * 验证是否为整数
 * @param str
 */
function checkInteger(str){
	var reg = /^[0-9]\d*$/;
	return reg.test(trim(str));
}

/**
 * 批量验证是否为整数且在范围之内
 * @param ids 但验证表单ID
 * @param msgs 表单名
 * @param min 最小值
 * @param max 最大值
 * @returns {Boolean}
 */
function checkIntegerAndRanges(ids, msgs, min, max){
	for(var i=0;i<ids.length;i++){
		var val = $("#" + ids[i]).val();
		if(val != ""){
			if(!checkIntegerAndRange(val, min, max)){ 
				jAlert(msgs[i] + "必须为整数，且必须在"+ min +"~" + max + "之间！","提示信息");
				$("#" + ids[i]).select();
				return false;
			}
		}
	}
	return true;
}

/**
 * 验证是否为整数且在范围之内
 * @param inte 待验证数据
 * @param min 最小值
 * @param max 最大值
 * @returns
 */
function checkIntegerAndRange(inte, min, max){
	var result = checkInteger(inte);
	if(result){
		if(inte<min || inte>max){
			result = false;
		}
	}
	return result;
}

//字符串是否为空
function isEmpty(str){
 	if (str == null || str.trim()== "") {
 		return true;
 	} else {
 		return false;
 	}
 }

//判断String类型日期(YYYY-MM-DD YYYY/MM/DD)
function isDate(str){
	var r = str.match(/^(\d{4})-(\d{1,2})-(\d{1,2})$/);
	if( r == null ) {
		r = str.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2})$/);
		if(r == null ) {
			return false;
		}
	}
	var d = new Date(r[1], r[2]-1, r[3]);
	return (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[2]&&d.getDate()==r[3]);
}

//判断String类型日期 (YYYY-MM-DD HH24:MI 或者 YYYY/MM/DD HH24:MI)
function isDateTime(str) {
	var r = str.match(/^(\d{4})-(\d{1,2})-(\d{1,2}) (\d{1,2}):(\d{1,2})$/);
 	if( r == null ) {
 		r = str.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2}) (\d{1,2}):(\d{1,2})$/);
 		if(r == null ) {
 			return false;
 		}
 		return false;
 	}
 	var d = new Date(r[1], r[2]-1, r[3], r[4], r[5]); 
 	return (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[2]&&d.getDate()==r[3] 
 				&& d.getHours() == r[4] && d.getMinutes() == r[5]);
 }
 
//判断String类型日期 (YYYY-MM-DD HH24:MI:SS 或者 YYYY/MM/DD HH24:MI:SS)
function isDateTimeFull(str) {
	var r = str.match(/^(\d{4})-(\d{1,2})-(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/);
	if( r == null ) {
		r = str.match(/^(\d{4})\/(\d{1,2})\/(\d{1,2}) (\d{1,2}):(\d{1,2}):(\d{1,2})$/);
		if(r == null ) {
			return false;
		}
		return false;
	}
	var d = new Date(r[1], r[2]-1, r[3], r[4], r[5], r[6]);
	return (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[2]&&d.getDate()==r[3] 
				&& d.getHours() == r[4] && d.getMinutes() == r[5] && d.getSeconds() == r[6]);
}

/**
 * 检查日期格式(YYYY-MM-DD HH24:MI 或者 YYYY/MM/DD HH24:MI)，如果格式错误则清空表单
 * @param id 表单ID
 */
function checkDateTimeFormat(id){
	var value = $("#" + id).val();
	if(!isDateTime(value)){
		 $("#" + id).val("");
	}
}

/**
 * 检查日期格式(YYYY-MM-DD YYYY/MM/DD)，如果格式错误则清空表单
 * @param id 表单ID
 */
function checkDateFormat(id){
	var value = $("#" + id).val();
	if(!isDate(value)){
		 $("#" + id).val("");
	}
}

/**
 * 检查母条码号格式
 * @param id
 * @param msg
 * @returns {Boolean}
 */
function checkBarCode(id,msg){
	var val = $("#" + id).val();
	if(val != ""){
		if(!checkMotherBar(val)){ 
			jAlert(msg + "必须为12位数字且末两位必须为0！","提示信息");
			$("#" + id).select();
			return false;
		}
	}
	return true;
}

//上一个方法，如果条码为11位或12位但结尾只有一个0也可以通过
function checkBarCodeNew(id, msg){
	var val = $("#" + id).val();
	if(val != ""){
		if(!(/^[0-9]{10}00$/.test(val))){ 
			jAlert(msg + "必须为12位数字且末两位必须为0！","提示信息");
			$("#" + id).select();
			return false;
		}
	}
	return true;
}
/**
 * 检查母条码格式
 * @param str
 * @returns
 */
function checkMotherBar(str){
	var reg = /^[0-9]{10}00?$/;
	return reg.test(str);
}

function checkResourceBar(str){
	if(trim(str)==""){
		return false;
	}
	var reg = /^[0-9]{9}?$/;
	return reg.test(trim(str));
}

/**
 * 验证条码号(数字，长度为12)
 * @param str
 * @returns
 */
function checkBar(str){
	var reg = /^[0-9]{12}?$/;
	return reg.test(trim(str));
}

/**
 * 验证试管架号(数字，长度为5)
 * @param str
 * @returns
 */
function checkRackCode(str){
	var reg = /^[0-9]{5}?$/;
	return reg.test(trim(str));
}

/**
 * 
 * @param fBar
 * @param sBar
 * @returns {Boolean}
 */
function checkTwoBar(fBar, sBar){
	if(fBar == ""){
		return false;
	}
	if(fBar != sBar){
		return false;
	}
	return true;
}

function getYestoday(date){       
	var yesterday_milliseconds=date.getTime()-1000*60*60*24;        
	var yesterday = new Date();        
	yesterday.setTime(yesterday_milliseconds);        
	var strYear = yesterday.getFullYear();     
	var strDay = yesterday.getDate();     
	var strMonth = yesterday.getMonth()+1;   
	if(strMonth<10)     
	{     
		strMonth="0"+strMonth;     
	}     
	datastr = strYear+"-"+strMonth+"-"+strDay;   
	return datastr;   
} 

/**
 * 正负数
 * 正负小数,两位小数/^(|[+-]?(0|([1-9]\d*)|((0|([1-9]\d*))?\.\d{1,2})){1,1})$/;
 */
function validateDouble(sDouble){
  //var re = /^\d+(?=\.{0,1}\d+$|$)/;
  var re = /^[-+]?[0-9]+(\.[0-9]+)?$/;
  return re.test(sDouble);
}

 function replaceStr(str){
	 if (typeof(str)!=='string') return str;
		str = str.replace(/'/g, '\\\'');
		str = str.replace(/"/g, '\\"');
		return str;
 }
 
 function replaceHtml(str){
	 if (typeof(str)!=='string') return str;
		str = str.replace(/&/g, "&amp;");
		str = str.replace(/"/g, "&quot;");
		str = str.replace(/'/g, "&apos;");
		str = str.replace(/</g, "&lt;");
		str = str.replace(/>/g, "&gt;");
		return str;
 }

 /**
  * 验证是否是正整数
  * @param str
  * @returns
  */
 function checkPositiveInteger(str){
	 var reg = /^[1-9]*[1-9][0-9]*$/;
	 return reg.test(str);
 }
 
 /**
  * 验证身份证
  * @param str
  * @returns
  */
 function isCardNo(str) { 
	 var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X)$)/; 
	 return reg.test(str); 
 } 
 
 /**
  * 验证身份证性别
  * @param sex
  * @param idCardNum
  * @returns
  */
 function checkSex(sex,idCardNum) {
	 var numSex = "男";
	if (idCardNum.length==15) {
		var str = idCardNum.substr(14,1);
		if (str%2==0 ) {
			numSex = "女";
		}
		
	} else {
		var str = idCardNum.substring(16,17);
		if (str%2==0 ) {
			numSex = "女";
		}
	}
	if (sex != numSex) {
		return false;
	} 
	return true;
 }; 

 
 /**
  * 严格验证身份证
  * @param str
  * @returns
  */
 var vcity={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古", 
		    21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏", 
		    33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南", 
		    42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆", 
		    51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃", 
		    63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}; 

 function isIdCardNum(obj) {
	// 校验长度，类型
	if (!isCardNo(obj)) {
		return false;
	}
	// 检查省份
	if (checkProvince(obj) === false) {
		return false;
	}
	// 校验生日
	if (checkBirthday(obj) === false) {
		return false;
	}
	// 检验位的检测
	if (checkParity(obj) === false) {
		return false;
	}
	return true;
}; 
 
// 取身份证前两位,校验省份
 function checkProvince(obj) {
	var province = obj.substr(0, 2);
	if (vcity[province] == undefined) {
		return false;
	}
	return true;
} 
 
 //检查生日是否正确 
 function checkBirthday(obj) {
	var len = obj.length;
	// 身份证15位时，次序为省（3位）市（3位）年（2位）月（2位）日（2位）校验位（3位），皆为数字
	if (len == '15') {
		var re_fifteen = /^(\d{6})(\d{2})(\d{2})(\d{2})(\d{3})$/;
		var arr_data = obj.match(re_fifteen);
		var year = arr_data[2];
		var month = arr_data[3];
		var day = arr_data[4];
		var birthday = new Date('19' + year + '/' + month + '/' + day);
		return verifyBirthday('19' + year, month, day, birthday);
	}
	// 身份证18位时，次序为省（3位）市（3位）年（4位）月（2位）日（2位）校验位（4位），校验位末尾可能为X
	if (len == '18') {
		var re_eighteen = /^(\d{6})(\d{4})(\d{2})(\d{2})(\d{3})([0-9]|X)$/;
		var arr_data = obj.match(re_eighteen);
		var year = arr_data[2];
		var month = arr_data[3];
		var day = arr_data[4];
		var birthday = new Date(year + '/' + month + '/' + day);
		return verifyBirthday(year, month, day, birthday);
	}
	return false;
};

//校验日期 
function verifyBirthday(year, month, day, birthday) {
	var now = new Date();
	var now_year = now.getFullYear();
	// 年月日是否合理
	if (birthday.getFullYear() == year && (birthday.getMonth() + 1) == month
			&& birthday.getDate() == day) {
		// 判断年份的范围（3岁到100岁之间)
		var time = now_year - year;
		if (time >= 0 && time <= 140) {
			return true;
		}
		return false;
	}
	return false;
}; 

// 校验位的检测
function checkParity(obj) {
	// 15位转18位
	obj = changeFivteenToEighteen(obj);
	var len = obj.length;
	if (len == '18') {
		var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8,
				4, 2);
		var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3',
				'2');
		var cardTemp = 0, i, valnum;
		for (i = 0; i < 17; i++) {
			cardTemp += obj.substr(i, 1) * arrInt[i];
		}
		valnum = arrCh[cardTemp % 11];
		if (valnum == obj.substr(17, 1)) {
			return true;
		}
		return false;
	}
	return false;
}; 

// 15位转18位身份证号
function changeFivteenToEighteen(obj) {
	if (obj.length == '15') {
		var arrInt = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8,
				4, 2);
		var arrCh = new Array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3',
				'2');
		var cardTemp = 0, i;
		obj = obj.substr(0, 6) + '19' + obj.substr(6, obj.length - 6);
		for (i = 0; i < 17; i++) {
			cardTemp += obj.substr(i, 1) * arrInt[i];
		}
		obj += arrCh[cardTemp % 11];
		return obj;
	}
	return obj;
};

 var isIE = /msie/i.test(navigator.userAgent) && !window.opera;
 
 function getFileSize(id){
 	var fileSize = 0;
 	var target = document.getElementById(id);
 	if (isIE && !target.files) {
 		
 		var filePath = target.value;
 		var fileSystem = new ActiveXObject("Scripting.FileSystemObject");
 		var file = fileSystem.GetFile(filePath);
 		fileSize = file.Size;
 	} else {
 		
 		fileSize = target.files[0].size;
 	}
 	return fileSize;
 }
 
 